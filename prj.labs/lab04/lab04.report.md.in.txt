## Работа 4. Детектирование области документа на кадрах видео
автор: Ивершин В.С.</br>
дата: @time_stemp@</br>
https://github.com/Dartanum/Image-Processing/tree/master/prj.labs/lab04

### Задание
0. текст, иллюстрации и подписи отчета придумываем самостоятельно
1. самостоятельно снимаем видео смартфоном
- объект съемки - купюры (рубли разного номинала), расправленные и лежащие на поверхности (проективно искаженны прямоугольник)
- количество роликов - от 5 шт.
- длительность - 5-7 сек
- условия съемки разные
2. извлекаем по 3 кадра из каждого ролика (делим кол-во кадров на 5 и берем каждый с индеком 2/5,3/5,4/5)
3. цветоредуцируем изображения
4. бинаризуем изображения
5. морфологически обрабатываем изображения
6. выделяем основную компоненту связности
7. руками изготавливаем маски (идеальная зона купюры)
8. оцениваем качество выделение зоны и анализируем ошибки

### Результаты
*frame_1_vid_1* ![](output/frame_1_vid_1.png)
*frame_1_vid_2* ![](output/frame_1_vid_2.png)
*frame_1_vid_3* ![](output/frame_1_vid_3.png)</br>
Рис. 1. Исходные кадры из видеозаписей</br>

К исходным кадрам применяется цветоредуцирование (Рис. 2).</br>

*frame_grayscale_1_vid_1* ![](output/frame_grayscale_1_vid_1.png) 
*frame_grayscale_1_vid_2* ![](output/frame_grayscale_1_vid_2.png) 
*frame_grayscale_1_vid_3* ![](output/frame_grayscale_1_vid_3.png)</br>
Рис. 2. Цветоредуцированные кадры</br>

Далее цветоредуцированные изображения бинаризуются при помощи глобальной бинаризации OTSU (Рис. 3).</br>

*frame_bin_1_vid_1* ![](output/frame_bin_1_vid_1.png) 
*frame_bin_1_vid_2* ![](output/frame_bin_1_vid_2.png) 
*frame_bin_1_vid_3* ![](output/frame_bin_1_vid_3.png)</br>
Рис. 3. Бинаризированные кадры</br>

Над полученными изображениями производятся морфологические преобразования для удаления на них "дыр" и создания более четких границ (Рис. 4).</br>
Используемые операции: closing, opening и делатация.</br>

*frame_morph_1_vid_1* ![](output/frame_morph_1_vid_1.png) 
*frame_morph_1_vid_2* ![](output/frame_morph_1_vid_2.png) 
*frame_morph_1_vid_3* ![](output/frame_morph_1_vid_3.png)</br>
Рис. 4. Кадры после морфологической обработки</br>

Далее для получения маски производятся следующие действия:
1. Нахождение наибольшей по площади компоненты связности (КС)
2. На черное изображение накладывается область обрабатываемого кадра, входящая в КС
3. Все оставшиеся КС закрашиваются черным цветом для "очистки" изображения
4. Для закрашивания в белый цвет оставшихся внутри маски черных пикселей по белому изображению в горизонтальном направлении наносятся черные пиксели 
с двух сторон до момента когда встретится первый белый пиксель на маске.</br>

*frame_mask_1_vid_1* ![](output/frame_mask_1_vid_1.png) 
*frame_mask_1_vid_2* ![](output/frame_mask_1_vid_2.png) 
*frame_mask_1_vid_3* ![](output/frame_mask_1_vid_3.png)</br>
Рис. 5. Полученные программно маски</br>

Для проверки качества полученных программно масок вручную задаются эталонные маски (Рис. 6)</br>

*frame_etalon_mask_1_vid_1* ![](output/frame_etalon_mask_1_vid_1.png) 
*frame_etalon_mask_1_vid_2* ![](output/frame_etalon_mask_1_vid_2.png) 
*frame_etalon_mask_1_vid_3* ![](output/frame_etalon_mask_1_vid_3.png)</br>
Рис. 6. Эталонные маски</br>

Для визуализации отличий масок используется наложение их на исходные кадры в разных цветовых каналах (Рис. 7):
* Красный - программная маска
* Зеленый - эталонная маска
* Желтый - пересечение масок</br>

*frame_concatenated_masks_1_vid_1* ![](output/frame_concatenated_masks_1_vid_1.png) 
*frame_concatenated_masks_1_vid_2* ![](output/frame_concatenated_masks_1_vid_2.png) 
*frame_concatenated_masks_1_vid_3* ![](output/frame_concatenated_masks_1_vid_3.png)</br>
Рис. 7. Отличия масок</br>

При сравнении масок можно заметить, что маски купюр номиналом 100 и 1000 рублей определены довольно точно, что нельзя сказать о купюре номиналом 500 рублей.
Маска на ней вычислилась плохо из-за невысокого контраста фона и купюры, а также неравномерно распределенной яркости.

### Точность программных масок
Точностью программной маски относительно эталонной считается отношение пересечения пикселей масок на их объединение.
Полученная оценка показывает степень соответствия от 0 до 1, где чем ближе к 1, тем идентичнее маски.

| Название файла       | Точность  |
| -------------------- |:---------:|
| frame_1_vid_1.png    | 0.529942  |
| frame_2_vid_1.png    | 0.609547  |
| frame_3_vid_1.png    | 0.607686  |
| frame_1_vid_2.png    | 0.978552  |
| frame_2_vid_2.png    | 0.958585  |
| frame_3_vid_2.png    | 0.963971  |
| frame_1_vid_3.png    | 0.981857  |
| frame_2_vid_3.png    | 0.987018  |
| frame_3_vid_3.png    | 0.985940  |
| frame_1_vid_4.png    | 0.987103  |
| frame_2_vid_4.png    | 0.988804  |
| frame_3_vid_4.png    | 0.987940  |
| frame_1_vid_5.png    | 0.983916  |
| frame_2_vid_5.png    | 0.982554  |
| frame_3_vid_5.png    | 0.987095  |

### Текст программы

```cpp
@cpp_source@
```
